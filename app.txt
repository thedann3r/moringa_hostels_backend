here as some of the codes that we wll use later on, we are storing them here instead of commenting them out in our main code.

app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USE_SSL'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')  
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_USERNAME') 

s = Serializer(app.config['SECRET_KEY'])

class ResetPasswordRequest(Resource):
    def post(self):
        email = request.json.get('email')

        if not email:
            return {"error": "Email is required"}, 400

        user = User.query.filter_by(email=email).first()
        if user is None:
            return {"error": "No account found with that email address"}, 404

        token = s.dumps(email, salt='password-reset-salt')

        reset_url = f'http://127.0.0.1:5000/reset-password/{token}'

        msg = Message('Password Reset Request',
                      recipients=[email],
                      body=f'Click the link to reset your password: {reset_url}')
        
        try:
            mail.send(msg)
            return {"message": "Password reset email sent!"}, 200
        except Exception as e:
            return {"error": str(e)}, 500

class ResetPassword(Resource):
    def post(self, token):
        try:
            email = s.loads(token, salt='password-reset-salt', max_age=3600)
        except Exception as e:
            return {"error": "Invalid or expired token"}, 400

        data = request.get_json()
        new_password = data.get('password')

        if not new_password:
            return {"error": "Password is required"}, 400

        if not is_strong_password(new_password):
            return {"error": "Password must be at least 8 characters long and contain both letters and numbers."}, 400

        user = User.query.filter_by(email=email).first()
        if user is None:
            return {"error": "User not found"}, 404

        hashed_password = bcrypt.generate_password_hash(new_password).decode('utf-8')

        user.password = hashed_password
        db.session.commit()

        return {"message": "Password has been successfully reset!"}, 200


def is_strong_password(password):
    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)


api.add_resource(ResetPasswordRequest, '/reset-password')
api.add_resource(ResetPassword, '/reset-password/<token>')

from flask import Flask, request, jsonify, current_app, url_for
from itsdangerous import URLSafeTimedSerializer as Serializer, SignatureExpired

def generate_verification_token(email):
    serializer = Serializer(current_app.config['SECRET_KEY'])
    return serializer.dumps(email, salt='email-confirmation')
def send_verification_email(user_email):
    token = generate_verification_token(user_email)
    confirm_url = url_for('auth.verify_email', token=token, _external=True)
    
    msg = Message("Email Verification", recipients=[user_email])
    msg.body = f"Please click the following link to verify your email: {confirm_url}"
    mail.send(msg)

class EmailVerification(Resource):
    def get(self, token):
        try:
            serializer = Serializer(current_app.config['SECRET_KEY'])
            email = serializer.loads(token, salt='email-confirmation', max_age=3600)  # 1 hour expiry
        except SignatureExpired:
            return {'error': 'The verification link has expired!'}, 400
        except Exception as e:
            return {'error': 'Invalid or expired token'}, 400
        
        user = User.query.filter_by(email=email).first()
        if user and not user.is_verified:
            user.is_verified = True
            db.session.commit()
            return {'message': 'Email verified successfully!'}, 200
        return {'error': 'User not found or already verified.'}, 400

        send_verification_email(new_user.email)

 if not user.is_verified:
            return {'error': 'Please verify your email address to log in.'}, 400
            
api.add_resource(EmailVerification, '/verify_email/<string:token>')

